@{
    ViewBag.Title = "Carrito de Compras";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .cart-table {
        width: 100%;
        margin-top: 20px;
    }

        .cart-table th,
        .cart-table td {
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

    .cart-actions {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
    }

    .btn-custom {
        margin-top: 10px;
        width: 150px;
    }

    .btn-disabled {
        pointer-events: none;
        opacity: 0.6;
    }
</style>

<div class="container">
    <h2>Carrito de Compras</h2>

    <table class="cart-table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="cartItems">
            <!-- Los elementos del carrito se cargarán aquí dinámicamente -->
        </tbody>
    </table>
    <form id="formCompra" method="post" action="@Url.Action("PagarCarrito", "Pedido")" style="display: none;">
        <input type="hidden" name="carrito" id="carritoInput" />
    </form>
    <!-- Contenedor de acciones -->
    <div class="cart-actions">
        <button class="btn btn-primary btn-custom" onclick="volverAProductos()">Volver</button>
        <button id="checkoutButton" class="btn btn-success btn-custom btn-disabled" onclick="iniciarCompra()">Iniciar Compra</button>
    </div>
</div>
<!--modal para confirmacion oinformacion de compra antes de comprar o si el carrito esta vacio -->
<div class="modal fade" id="compraModal" tabindex="-1" aria-labelledby="compraModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="compraModalLabel">Atención:</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body-content">
                <!-- El contenido del mensaje se actualizará dinámicamente -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" id="confirmarCompraBtn" class="btn btn-success" onclick="confirmarCompra()">Confirmar</button>
            </div>
        </div>
    </div>
</div>
<script>
    // Obtener carrito desde localStorage
    var carrito = JSON.parse(localStorage.getItem('carrito')) || [];
    console.log(carrito);

    //paracargar los productos en la tabla del carrito
    function cargarCarrito() {
        var cartItemsContainer = document.getElementById('cartItems');
        cartItemsContainer.innerHTML = '';

        carrito.forEach(function (producto, index) {
            var row = `
                <tr>
                    <td>${producto.nombre}</td>
                    <td>
                        <button class="btn btn-sm btn-danger" onclick="actualizarCantidad(${index}, -1)">-</button>
                        <span id="cantidad-${index}">${producto.cantidad}</span>
                        <button class="btn btn-sm btn-success" onclick="actualizarCantidad(${index}, 1)">+</button>
                    </td>
                    <td>$${(producto.precio * producto.cantidad).toFixed(2)}</td>
                    <td>
                        <button class="btn btn-danger btn-sm" onclick="eliminarProducto(${index})">Eliminar</button>
                    </td>
                </tr>
            `;
            cartItemsContainer.innerHTML += row;
        });

        // Actualizar el almacenamiento local
        localStorage.setItem('carrito', JSON.stringify(carrito));

        // Actualizar el estado del botón de checkout
        actualizarEstadoBotonCheckout();
    }

    //para actualizar la cantidad de un producto en el carrito
    function actualizarCantidad(index, cambio) {
        var cantidadActual = carrito[index].cantidad;
        var nuevaCantidad = cantidadActual + cambio;
        var stockDisponible = carrito[index].stock; // Debes asegurarte de que el stock esté disponible en el carrito

        if (nuevaCantidad > 0 && nuevaCantidad <= stockDisponible) {
            carrito[index].cantidad = nuevaCantidad;
        } else if (nuevaCantidad <= 0) {
            carrito.splice(index, 1);
        }

        cargarCarrito();
    }

    function eliminarProducto(index) {
        carrito.splice(index, 1);
        cargarCarrito();
    }

    function volverAProductos() {
        window.location.href = '@Url.Action("Listado", "Producto")'; // Cambia a la acción y el controlador que corresponda
    }

    // Función para iniciar la compra
    /*function iniciarCompra() { //esta era la q etaba antes cuando mostraba alerts,ahora muesta un modal de confirmacion
        if (carrito.length > 0) {
            alert('Iniciando el proceso de compra...');
            var carritoJson = JSON.stringify(carrito);
            document.getElementById('carritoInput').value = carritoJson;

            // Envía el formulario
            document.getElementById('formCompra').submit();
        } else {
            alert('Tu carrito está vacío.');
        }
    }*/
    function iniciarCompra() {
        var carritoValido = carrito.length > 0;
        var modalBodyContent = document.getElementById('modal-body-content');
        var confirmarCompraBtn = document.getElementById('confirmarCompraBtn');

        if (carritoValido) {
            // Actualiza el contenido del modal
            modalBodyContent.innerHTML = '¿Estás seguro de que deseas iniciar la compra?';
            confirmarCompraBtn.style.display = 'inline-block'; // Mostrar el botón de confirmar

            // Mostrar el modal
            var compraModal = new bootstrap.Modal(document.getElementById('compraModal'), {
                keyboard: false
            });
            compraModal.show();
        } else {
            // Si el carrito está vacío, muestra otro mensaje
            modalBodyContent.innerHTML = 'Tu carrito está vacío.';
            confirmarCompraBtn.style.display = 'none'; // Ocultar el botón de confirmar

            // Mostrar el modal
            var compraModal = new bootstrap.Modal(document.getElementById('compraModal'), {
                keyboard: false
            });
            compraModal.show();
        }
    }
    function confirmarCompra() {
        var carritoJson = JSON.stringify(carrito);
        document.getElementById('carritoInput').value = carritoJson;

        // Envía el formulario
        document.getElementById('formCompra').submit();
    }
    // Función para actualizar el estado del botón de checkout
    function actualizarEstadoBotonCheckout() {
        var botonCheckout = document.getElementById('checkoutButton');
        var carritoValido = carrito.every(function (producto) {
            return producto.cantidad <= producto.stock;
        });

        if (carritoValido) {
            botonCheckout.classList.remove('btn-disabled');
        } else {
            botonCheckout.classList.add('btn-disabled');
        }
    }

    // Cargar el carrito al cargar la página
    document.addEventListener('DOMContentLoaded', cargarCarrito);
</script>
